IMP Developer Notes
===================

These notes summarize the direction behind major coding choices and how each
component is intended to be used.

- **Modular design** keeps the project portable. Most modules live under
  `core` or `expansion` and communicate via simple function calls.
- **Additive updates** preserve history so IMP can roll back or study old
  behavior when evolving.
- **Collaboratory network** (`imp-collaboratory-nn.py` and
  `imp-collaboratory-engine.py`) explores collaborative task planning. The
  engine loads the network and evaluates inputs to suggest coordination paths.
- **Self-improvement modules** in `self-improvement` allow IMP to analyse its
  own code and evolve over time.
- `imp-code-map.py` builds a quick reference of every function and class so IMP can
  survey the codebase before making changes.
- **Security modules** defend the system while keeping logs for review.
- **Game copilot** (`imp-game-copilot.py`) lets IMP learn simple games and spin up Sword Art Online-inspired dreamscapes for blockchain experiments.
- **BBI network** (`imp-bbi-nn.py` and `imp-bbi-engine.py`) evolves a brain-to-brain interface to manage user interactions inside those dreamscapes.

Developers are encouraged to reference these notes when extending IMP so new
features follow the same philosophy and maintain compatibility.
